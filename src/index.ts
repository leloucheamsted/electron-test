import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import * as path from 'path';
import * as fs from 'fs';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
import MarkdownIt from 'markdown-it';
const md = new MarkdownIt();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      // preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      preload: path.join(__dirname, '..', 'renderer', 'main_window', 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false,
      sandbox: true,

    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
ipcMain.handle('get-notes', async () => {
  return readNotes();
});

ipcMain.handle('add-note', async (event, note) => {
  const notes = readNotes();
  // Generate a new id (string, to match your notes.json)
  const newId = (notes.length > 0 ? (parseInt(notes[notes.length - 1].id, 10) + 1) : 1).toString();
  const newNote = { ...note, id: newId, created_at: new Date().toISOString(), updated_at: new Date().toISOString() };
  notes.push(newNote);
  writeNotes(notes);
  return newNote;
});

ipcMain.handle('update-note', async (event, note) => {
  const notes = readNotes();
  const idx = notes.findIndex((n: any) => n.id === note.id);
  if (idx !== -1) {
    notes[idx] = { ...notes[idx], ...note, updated_at: new Date().toISOString() };
    writeNotes(notes);
    return notes[idx];
  }
  return null;
});

ipcMain.handle('delete-note', async (event, noteId) => {
  // remove the note with the given id
  const notes = readNotes();
  const updatedNotes = notes.filter((note: any) => note.id !== noteId);
  writeNotes(updatedNotes);
  return updatedNotes;
});
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle('generate-pdf', async (event, markdown, title) => {
  const win = BrowserWindow.getFocusedWindow();
  if (!win) return;

  const html = `
    <html>
      <head>
        <style>
          body {
            font-family: sans-serif;
            padding: 40px;
            max-width: 800px;
          }
        </style>
      </head>
      <body>
        <h2>${title}</h2>
        ${md.render(markdown)}
      </body>
    </html>
  `;

  const printWin = new BrowserWindow({ show: false });
  printWin.loadURL('data:text/html;charset=utf-8,' + encodeURIComponent(html));

  printWin.webContents.on('did-finish-load', async () => {
    const pdfData = await printWin.webContents.printToPDF({
      pageSize: 'A4',
      printBackground: true,
    });

    const { filePath } = await dialog.showSaveDialog({
      defaultPath: `${title}.pdf`,
      filters: [{ name: 'PDF', extensions: ['pdf'] }]
    });

    if (filePath) {
      fs.writeFile(filePath, pdfData, (err) => {
        if (err) {
          console.error('Erreur lors de l\'enregistrement du PDF :', err);
        }
      });
    }

    printWin.close();
  });
});
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
const userDataPath = app.getPath('userData'); // ex: ~/Library/Application Support/notes-desktop1

const notesFilePath = path.join(userDataPath, 'notes.json');

if (!fs.existsSync(notesFilePath)) {
  fs.writeFileSync(notesFilePath, '[]', 'utf-8');
}

function readNotes() {
  try {
    const data = fs.readFileSync(notesFilePath, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    console.error('Erreur lecture notes.json:', err);
    return [];
  }
}

function writeNotes(notes: any[]) {
  fs.writeFileSync(notesFilePath, JSON.stringify(notes, null, 2));
}


